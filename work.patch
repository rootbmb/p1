Index: z3.3.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- z3.3.py	(revision )
+++ z3.3.py	(revision )
@@ -0,0 +1,11 @@
+'''
+
+Получить из строки CONFIG список VLANов вида: ['1', '3', '10', '20', '30', '100'] 
+Ограничение: Все задания надо выполнять используя только пройденные темы.
+'''
+
+CONFIG = 'switchport trunk allowed vlan 1,3,10,20,30,100'
+CONF = CONFIG.split()
+VLANS = CONF[-1].split(',')
+
+print(VLANS)
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision )
+++ .idea/misc.xml	(revision )
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.5.3 (/usr/bin/python3.5)" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: z3.5.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- z3.5.py	(revision )
+++ z3.5.py	(revision )
@@ -0,0 +1,12 @@
+'''
+Список VLANS это список VLANов, собранных со всех устройств сети, поэтому в
+списке есть повторяющиеся номера VLAN.
+Из списка нужно получить уникальный список VLANов, отсортированный по
+возрастанию номеров.
+Ограничение: Все задания надо выполнять используя только пройденные темы.
+'''
+VLANS = [10, 20, 30, 1, 2, 100, 10, 30, 3, 4, 10]
+vl = set(VLANS)
+VLANS = list(vl)
+VLANS.sort()
+print(VLANS)
Index: z3.8.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- z3.8.py	(revision )
+++ z3.8.py	(revision )
@@ -0,0 +1,22 @@
+'''
+Задание 3.8
+Преобразовать IP-адрес (переменная IP) в двоичный формат и вывести вывод
+столбцами на стандартный поток вывода, таким образом:
+первой строкой должны идти десятичные значения байтов
+второй строкой двоичные значения
+Вывод должен быть упорядочен также, как в примере:
+столбцами
+ширина столбца 10 символов
+Пример вывода:
+10        1       1        1
+00001010 00000001 00000001 00000001
+Ограничение: Все задания надо выполнять используя только пройденные темы.
+'''
+IP = '192.168.3.1'
+old_ip = IP.split('.')
+
+print(('{:11}{:11}{:11}{:11}').format(
+    old_ip[0], old_ip[1], old_ip[2], old_ip[3]))
+
+print(('{:10} {:10} {:10} {:10}').format(bin(int(old_ip[0])), bin(
+    int(old_ip[1])), bin(int(old_ip[2])), bin(int(old_ip[3]))))
Index: 1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 1.py	(revision )
+++ 1.py	(revision )
@@ -0,0 +1,17 @@
+a = 10
+b = 5
+if a > b:
+    print("A больше B")
+    print(a - b)
+else:
+    print("B больше или равно A")
+    print(b - a)
+print("The End")
+
+
+def open_file(filename):
+
+    print("Reading file", filename)
+    with open(filename) as f:
+        return f.read()
+        print("Done")
Index: access_template_input.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- access_template_input.py	(revision )
+++ access_template_input.py	(revision )
@@ -0,0 +1,11 @@
+interface = input('Enter interface type and number: ')
+vlan = input('Enter VLAN number: ')
+access_template = ['switchport mode access',
+                   'switchport access vlan {}',
+                   'switchport nonegotiate',
+                   'spanning-tree portfast',
+                   'spanning-tree bpduguard enable']
+print('\n' + '-' * 30)
+print('interface {}'.format(interface))
+print('\n'.join(access_template).format(vlan))
+print('-' * 30)
Index: .idea/p1.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/p1.iml	(revision )
+++ .idea/p1.iml	(revision )
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="TestRunnerService">
+    <option name="PROJECT_TEST_RUNNER" value="Unittests" />
+  </component>
+</module>
\ No newline at end of file
Index: tt.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tt.py	(revision )
+++ tt.py	(revision )
@@ -0,0 +1,0 @@
Index: z3.2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- z3.2.py	(revision )
+++ z3.2.py	(revision )
@@ -0,0 +1,9 @@
+# Преобразовать строку MAC из формата XXXX:XXXX:XXXX в формат
+# XXXX.XXXX.XXXX
+# Ограничение: Все задания надо выполнять используя только пройденные темы.
+
+MAC = 'AAAA:BBBB:CCCC'
+
+MAC = MAC.replace(':', '.')
+
+print(MAC)
Index: p1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- p1.py	(revision )
+++ p1.py	(revision )
@@ -0,0 +1,22 @@
+
+def arithmetic(a, b, fun):
+    if fun == '*':
+        c = a * b
+    elif fun == '-':
+        c = a - b
+    elif fun == '/':
+        c = a / b
+    elif fun == '//':
+        c = a // b
+    elif fun == '+':
+        c = a + b
+    else:
+        c = 'not fun'
+        print(c)
+    return c
+
+
+n = ('+', '*', '-', '/', '//', 'tjgirtg')
+for i in n:
+    print(arithmetic(10, 20, i))
+print()
Index: z3.9.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- z3.9.py	(revision )
+++ z3.9.py	(revision )
@@ -0,0 +1,18 @@
+'''
+Задание 3.9
+Найти индекс последнего вхождения элемента.
+Например, для списка num_list, число 10 последний раз встречается с индексом 4; в
+списке word_list, слово 'ruby' последний раз встречается с индексом 6.
+Сделать решение общим (то есть, не привязываться к конкретному элементу в
+конкретном списке) и проверить на двух списках, которые указаны и на разных
+элементах.
+Ограничение: Все задания надо выполнять используя только пройденные темы.
+'''
+
+num_list = [10, 2, 30, 100, 10, 50, 11, 30, 15, 7]
+word_list = ['python', 'ruby', 'perl',
+             'ruby', 'perl', 'python', 'ruby', 'perl']
+new_num_list = "".join(str(num_list))
+print(num_list)
+print(num_list.index(10, [-1]))
+# print(num_list.find(str(10)))
Index: .idea/z3.7.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/z3.7.py	(revision )
+++ .idea/z3.7.py	(revision )
@@ -0,0 +1,0 @@
Index: z3.4.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- z3.4.py	(revision )
+++ z3.4.py	(revision )
@@ -0,0 +1,23 @@
+'''
+Из строк command1 и command2 получить список VLANов, которые есть и в команде
+command1 и в команде command2.
+Для данного примера, результатом должен быть список: [1, 3, 100] Этот список
+содержит подсказку по типу итоговых данных.
+Ограничение: Все задания надо выполнять используя только пройденные темы.
+command1 = 'switchport trunk allowed vlan 1,3,10,20,30,100'
+command2 = 'switchport trunk allowed vlan 1,3,100,200,300'
+'''
+command1 = 'switchport trunk allowed vlan 1,3,10,20,30,100'
+command2 = 'switchport trunk allowed vlan 1,3,100,200,300'
+
+com1 = command1.split()
+vlan1 = com1[-1].split(',')
+print(vlan1)
+com2 = command2.split()
+vlan2 = com2[-1].split(',')
+print(vlan2)
+
+VLAN = (set(vlan1) & set(vlan2))
+VLAN = list(VLAN)
+
+print(VLAN)
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(revision )
+++ .idea/vcs.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: z4.1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- z4.1.py	(revision )
+++ z4.1.py	(revision )
@@ -0,0 +1,40 @@
+'''
+Задание 4.1
+Запросить у пользователя ввод IP-сети в формате: 10.1.1.0/24
+Затем вывести информацию о сети и маске в таком формате:
+Network:
+10 1 1 0
+00001010 00000001 00000001 00000000
+255 255 255 0
+11111111 11111111 11111111 00000000
+Mask:
+/24
+Проверить работу скрипта на разных комбинациях сеть/маска.
+Ограничение: Все задания надо выполнять используя только пройденные темы.
+'''
+IP = input('введите IP адрес в формате:10.1.1.0/24 -- ')
+new_IP = IP.split('/')
+Mask = new_IP.pop(-1)
+print(Mask)
+print(new_IP)
+IP = '.'.join(new_IP).split('.')
+print(IP)
+print('Network:\n', ("{:10} {:10} {:10} {:10}").format(
+    IP[0], IP[1], IP[2], IP[3]), '\n', ("{:10} {:10} {:10} {:10}").format(bin(
+        int(IP[0])), bin(int(IP[1])), bin(int(IP[2])), bin(int(IP[3]))))
+print('-' * 44)
+mask_net = int(Mask) // 8
+print(mask_net)
+m = {}
+#a = ['255' for i in range(mask_net)]
+# print(a)
+
+#
+'''MASK = mask_net.split()
+print('Mask:', '\n', '/' + Mask)
+print((" {:10} {:10} {:10} {:10}").format(
+    MASK[0], MASK[1], MASK[2], MASK[3]), '\n', ("{:10} {:10} {:10} {:10}").format(bin(
+        int(MASK[0])), bin(int(MASK[1])), bin(int(MASK[2])), bin(int(MASK[3]))))
+
+print('-' * 44)
+'''
Index: c.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1251
===================================================================
--- c.py	(revision )
+++ c.py	(revision )
@@ -0,0 +1,97 @@
+# -*- coding: Windows-1251 -*-
+# Сочетания
+# ПРОГРАММА ДЛЯ ГЕНЕРИРОВАНИЯ
+# ВСЕХ ПОДМНОЖЕСТВ k МНОЖЕСТВА ЧИСЕЛ n=1..nElem
+# макс. число элементов в
+# множестве:
+MAX_ELEM = 30
+#число элементов в
+# подмножестве:
+k = 0
+# список, содержащий
+# очередное подмножество:
+a = []
+# номер подмножества:
+nSubset = 0
+# ГЛАВНАЯ ФУНКЦИЯ
+
+
+def main():
+    print('Генерируем сочетания')
+    print()
+    global k
+    # бесконечный цикл ввода данных -
+    # пока пользователь не закроет программу
+    # или не введет 0:
+    while True:
+        s = "Число элементов (1.." + str(MAX_ELEM) + ") > "
+        print(s, end='')
+        # число элементов:
+        nElem = int(input())
+        # если пользователь ввёл 0,
+        # то программу закрываем:
+        if (nElem == 0):
+            return
+        # считываем число элементов подмножества:
+        s = "Число элементов в подмножестве (1.." + str(nElem) + ") > "
+        print(s, end='')
+        k = int(input())
+        if (k > nElem):
+            print("Повторите ввод!")
+            print()
+            continue
+
+        # генерируем все подмножества:
+        n = SubSet(nElem)
+        print("Число сочетаний = " + str(n))
+        print()
+#//Генерируем все сочетания множества
+#//из k элементов
+# Генерируем все сочетания множества 1..nElem
+
+
+def SubSet(nElem):
+    global nSubset
+    global a
+    a.append(0)
+    for i in range(1, k + 1):
+        a.append(i)
+    nSubset = 0
+    p = k
+    while (p >= 1):
+        # печатаем очередное подмножество:
+        nSubset += 1
+        WriteSubset()
+        if (k == nElem):
+            break
+        if (a[k] == nElem):
+            p -= 1
+        else:
+            p = k
+        if (p >= 1):
+            for i in range(k, p - 1, -1):
+                a[i] = a[p] + i - p + 1
+
+    return nSubset
+
+# ПЕЧАТАЕМ ОЧЕРЕДНУЮ ПЕРЕСТАНОВКУ
+# ЭЛЕМЕНТОВ МНОЖЕСТВА
+
+
+def WriteSubset():
+    if (nSubset > 29):
+        return
+    s = ""
+    if (nSubset < 1000):
+        s += " "
+    if (nSubset < 100):
+        s += " "
+    if (nSubset < 10):
+        s += " "
+        s += str(nSubset) + "> "
+    for i in range(1, k + 1):
+        s += str(a[i]) + " "
+    print(s)
+
+
+main()
Index: z3.7.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- z3.7.py	(revision )
+++ z3.7.py	(revision )
@@ -0,0 +1,10 @@
+'''
+Задание 3.7
+Преобразовать MAC-адрес в двоичную строку (без двоеточий).
+Ограничение: Все задания надо выполнять используя только пройденные темы.
+'''
+MAC = 'AAAA:BBBB:CCCC'
+mac = MAC.split(':')
+new_mac = "".join(mac)
+print(new_mac)
+print(bin(int(new_mac, 16)))
Index: access_template.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- access_template.py	(revision )
+++ access_template.py	(revision )
@@ -0,0 +1,7 @@
+access_template = ['switchport mode access',
+                   'switchport access vlan {}',
+                   'switchport nonegotiate',
+                   'spanning-tree portfast',
+                   'spanning-tree bpduguard enable']
+
+print('\n'.join(access_template).format(5))
Index: z3.6.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- z3.6.py	(revision )
+++ z3.6.py	(revision )
@@ -0,0 +1,31 @@
+'''Обработать строку ospf_route и вывести информацию на стандартный поток вывода в
+виде:
+Protocol: OSPF
+Prefix: 10.0.24.0/24
+AD/Metric: 110/41
+Next-Hop: 10.0.13.3
+Last update: 3d18h
+Outbound Interface: FastEthernet0/0
+Ограничение: Все задания надо выполнять используя только пройденные темы.
+'''
+ospf_route = 'OSPF         10.0.24.0/24 [110/41] via 10.0.13.3, 3d18h, FastEthernet0/0'
+
+ospf_route = ospf_route.split()
+print(ospf_route)
+AttributProtocol = ['Protocol', 'Prefix', 'AD/Metric',
+                    'Next-Hop', 'Last update', 'Outbound Interface']
+
+# OSPF = dict(AttributProtocol[0]=ospf_route[0], AttributProtocol[1]=ospf_route[1], AttributProtocol[2]=ospf_route[2])
+
+ospf_route1 = dict.fromkeys(AttributProtocol)
+
+print(ospf_route1)
+ospf_route1['Protocol'] = ospf_route[0]
+ospf_route1['Prefix'] = ospf_route[1]
+ospf_route1['AD/Metric'] = ospf_route[2]
+ospf_route1['Next-Hop'] = ospf_route[4]
+ospf_route1['Last update'] = ospf_route[5]
+ospf_route1['Outbound Interface'] = ospf_route[6]
+
+
+print(ospf_route1)
Index: z3.1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- z3.1.py	(revision )
+++ z3.1.py	(revision )
@@ -0,0 +1,9 @@
+# Обработать строку NAT таким образом, чтобы в имени интерфейса вместо
+# FastEthernet было GigabitEthernet.
+# Ограничение: Все задания надо выполнять используя только пройденные темы.
+
+NAT = "ip nat inside source list ACL interface FastEthernet0/1 overload"
+
+NAT = NAT.replace('FastEthernet', 'GigabitEthernet')
+
+print(NAT)
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(revision )
+++ .idea/modules.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/p1.iml" filepath="$PROJECT_DIR$/.idea/p1.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: access_template_argv.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- access_template_argv.py	(revision )
+++ access_template_argv.py	(revision )
@@ -0,0 +1,10 @@
+from sys import argv
+interface, vlan = argv[1:]
+print(argv)
+access_template = ['switchport mode access',
+                   'switchport access vlan {}',
+                   'switchport nonegotiate',
+                   'spanning-tree portfast',
+                   'spanning-tree bpduguard enable']
+print('interface {}'.format(interface))
+print('\n'.join(access_template).format(vlan))
